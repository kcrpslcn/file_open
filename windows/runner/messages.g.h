// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FileOpenFlutterApi;
  friend class FileOpenHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};



class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;
 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;
};

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class FileOpenFlutterApi {
 public:
  FileOpenFlutterApi(flutter::BinaryMessenger* binary_messenger);
  FileOpenFlutterApi(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void OnFileOpened(
    const flutter::EncodableList& file_paths,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class FileOpenHostApi {
 public:
  FileOpenHostApi(const FileOpenHostApi&) = delete;
  FileOpenHostApi& operator=(const FileOpenHostApi&) = delete;
  virtual ~FileOpenHostApi() {}
  virtual std::optional<FlutterError> SetLoggingEnabled(bool enabled) = 0;

  // The codec used by FileOpenHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FileOpenHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FileOpenHostApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FileOpenHostApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);
 protected:
  FileOpenHostApi() = default;
};
}  // namespace pigeon
#endif  // PIGEON_MESSAGES_G_H_
